# import httpx
from typing import Optional, Dict, Any, Literal, Union, AsyncGenerator
import re
import aiofiles
import asyncio

async def async_file_iterator(file_path: str) -> AsyncGenerator[bytes, None]:
    try:
        if not file_path:
            return  # Kh√¥ng c·∫ßn `return None`, ch·ªâ c·∫ßn `return` l√† ƒë·ªß

        await asyncio.sleep(0.1)  # Cho h·ªá ƒëi·ªÅu h√†nh c√≥ th·ªùi gian ghi xong

        async with aiofiles.open(file_path, mode="rb") as f:
            while chunk := await f.read(1024):  # ƒê·ªçc t·ª´ng chunk 1024 bytes
                yield chunk

    except Exception as e:
        print(f"Error reading file: {e}")
        return 

def file_iterator(file_path: str):
    with open(file_path, mode="rb") as f:
        yield from f

def to_safe_filename(filename: str) -> str:
    safe_filename = re.sub(r"[^\w.-]", "_", filename)

    return safe_filename

# # H√†m g·ªçi API chung v·ªõi method v√† URL t√πy ch·ªânh
# async def call_api(
#     method: Literal['GET', 'POST', 'PUT', 'DELETE'], 
#     url: str, 
#     params: Optional[Dict[str, Any]] = None, 
#     headers: Optional[Dict[str, str]] = None, 
#     json: Optional[Dict[str, Any]] = None,
#     data: Optional[Dict[str, Union[str, int, float]]] = None,
#     files: Optional[Dict[str, Any]] = None
# ) -> httpx.Response:
#     """
#     H√†m g·ªçi API chung v·ªõi c√°c method kh√°c nhau: GET, POST, PUT, DELETE.
    
#     :param method: Method HTTP (GET, POST, PUT, DELETE)
#     :param url: URL c·ªßa API c·∫ßn g·ªçi
#     :param params: Tham s·ªë URL (t√πy ch·ªçn)
#     :param headers: Th√¥ng tin header (t√πy ch·ªçn)
#     :param json: D·ªØ li·ªáu JSON cho body (t√πy ch·ªçn)
#     :param data: D·ªØ li·ªáu form-data cho body (t√πy ch·ªçn)
#     :param files: File g·ª≠i qua form-data (t√πy ch·ªçn)
    
#     :return: K·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ API d∆∞·ªõi d·∫°ng dict
#     """
#     async with httpx.AsyncClient() as client:
#         response = await client.request(
#             method, 
#             url, 
#             params=params, 
#             headers=headers, 
#             json=json,
#             data=data,
#             files=files
#         )
#         # Ki·ªÉm tra n·∫øu status code kh√¥ng ph·∫£i 200
#         response.raise_for_status()
#         return response  # Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng dict

# # H√†m g·ªçi API POST v·ªõi body l√† JSON v√† API Key tr√™n header
# async def call_api_post_with_json(
#     url: str, 
#     json_body: Dict[str, Any], 
#     api_key: str
# ) -> dict:
#     """
#     H√†m g·ªçi API POST v·ªõi body l√† JSON v√† API Key ƒë∆∞·ª£c th√™m v√†o header.
    
#     :param url: URL c·ªßa API c·∫ßn g·ªçi
#     :param json_body: D·ªØ li·ªáu JSON c·∫ßn g·ª≠i trong body c·ªßa POST request
#     :param api_key: API Key c·∫ßn g·ª≠i trong header
    
#     :return: K·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ API d∆∞·ªõi d·∫°ng dict
#     """
#     headers = {
#         "Authorization": f"Bearer {api_key}",
#         "Content-Type": "application/json; charset=UTF-8",
#     }
    
#     # G·ªçi API POST th√¥ng qua h√†m call_api
#     resp = await call_api(
#         method="POST",
#         url=url,
#         headers=headers,
#         json=json_body
#     )

#     return resp.json()

# # H√†m g·ªçi API POST v·ªõi form-data v√† file
# async def call_api_post_with_form_and_file(
#     url: str, 
#     form_data: Dict[str, Union[str, int, float]], 
#     file_path: str, 
#     file_key: str = "file",
#     api_key: Optional[str] = None
# ) -> dict:
#     """
#     H√†m g·ªçi API POST v·ªõi form-data v√† g·ª≠i k√®m file.

#     :param url: URL c·ªßa API c·∫ßn g·ªçi
#     :param form_data: D·ªØ li·ªáu form-data c·∫ßn g·ª≠i
#     :param file_path: ƒê∆∞·ªùng d·∫´n file c·∫ßn g·ª≠i
#     :param file_key: T√™n key c·ªßa file trong form-data (default: "file")
#     :param api_key: API Key (n·∫øu c·∫ßn th√™m v√†o header)
    
#     :return: K·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ API d∆∞·ªõi d·∫°ng dict
#     """
#     headers = {
#         "Content-Type": "multipart/form-data",
#     }
#     if api_key:
#         headers["Authorization"] = f"Bearer {api_key}"

#     # ƒê·ªçc file v√† t·∫°o object file ƒë·ªÉ g·ª≠i
#     with open(file_path, "rb") as file:
#         files = {file_key: (file_path, file, "application/octet-stream")}
        
#         # G·ªçi API v·ªõi form-data v√† file
#         return await call_api(
#             method="POST",
#             url=url,
#             headers=headers,
#             data=form_data,
#             files=files
#         )
    
# # H√†m g·ªçi API POST v·ªõi form-data v√† stream file t·ª´ URL
# async def call_api_post_with_form_and_stream(
#     url: str, 
#     form_data: Dict[str, Union[str, int, float]], 
#     file_stream_url: str, 
#     file_key: str = "file",
#     api_key: Optional[str] = None
# ) -> dict:
#     """
#     H√†m g·ªçi API POST v·ªõi form-data v√† g·ª≠i file stream t·ª´ m·ªôt URL.

#     :param url: URL c·ªßa API c·∫ßn g·ªçi
#     :param form_data: D·ªØ li·ªáu form-data c·∫ßn g·ª≠i
#     :param file_stream_url: URL c·ªßa file c·∫ßn t·∫£i v√† g·ª≠i
#     :param file_key: T√™n key c·ªßa file trong form-data (default: "file")
#     :param api_key: API Key (n·∫øu c·∫ßn th√™m v√†o header)
    
#     :return: K·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ API d∆∞·ªõi d·∫°ng dict
#     """
#     headers = {
#         "Content-Type": "multipart/form-data",
#     }
#     if api_key:
#         headers["Authorization"] = f"Bearer {api_key}"

#     async with httpx.AsyncClient() as client:
#         # T·∫£i file stream t·ª´ URL
#         async with client.stream("GET", file_stream_url) as file_response:
#             file_response.raise_for_status()

#             # ƒê·ªçc file stream ƒë·ªÉ g·ª≠i
#             files = {
#                 file_key: (file_stream_url.split("/")[-1], file_response.aiter_bytes(), "application/octet-stream")
#             }

#             # G·ª≠i form-data v√† stream file ƒë·∫øn API
#             response = await client.request(
#                 method="POST",
#                 url=url,
#                 headers=headers,
#                 data=form_data,
#                 files=files
#             )
#             response.raise_for_status()
#             return response.json()

# async def main():
#     try:
#         api_url = "https://jsonplaceholder.typicode.com/posts"
#         api_key = "your-api-key"
        
#         # ========= G·ªçi API POST v·ªõi JSON body ========= 
#         json_data = {
#             'title': 'foo',
#             'body': 'bar',
#             'userId': 2,
#         }

#         resp1 = await call_api('GET', api_url, params={'userId': 3})
#         print("üêç File: httpx/callApi.py | Line: 80 | undefined ~ resp1",resp1)
        
#         resp2 = await call_api_post_with_json(api_url, json_data, api_key)
#         print("üêç File: httpx/callApi.py | Line: 77 | undefined ~ resp2",resp2)


#         # ========= G·ªçi API POST v·ªõi form-data v√† stream file t·ª´ URL ========= 
#         form_data = {
#             'userId': 123,
#             'description': 'This is a test upload',
#         }

#         # ƒê∆∞·ªùng d·∫´n file
#         file_path = "example.txt"        
#         # URL file c·∫ßn stream
#         file_stream_url = "https://via.placeholder.com/150"

#         # G·ªçi API POST v·ªõi form-data v√† file
#         resp3 = await call_api_post_with_form_and_file(api_url, form_data, file_path, api_key=api_key)
#         print("Response from API with form-data and file:", resp3)

#         # G·ªçi API POST v·ªõi form-data v√† file stream
#         resp4 = await call_api_post_with_form_and_stream(api_url, form_data, file_stream_url, api_key=api_key)
#         print("Response from API with form-data and streamed file:", resp4)
        
#     except Exception as e:
#         print(e)

# if __name__ == "__main__":
#     import asyncio
#     asyncio.run(main())
